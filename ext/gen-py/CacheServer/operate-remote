#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.7.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import operate
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string get(string rowkey)'
  print '  i32 putjson(string rowkey, string key, string value, i32 type)'
  print '  i32 delkey(string rowkey)'
  print '  i32 dump()'
  print '  i32 put(string rowkey, string value)'
  print '  i32 load(string file)'
  print '  i32 shutdown()'
  print '  i32 clear()'
  print '  i32 count()'
  print '  i32 scan()'
  print '  i32 range(string from, string to)'
  print '  i32 putbatch( kvs)'
  print '  string status()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = operate.Client(protocol)
transport.open()

if cmd == 'get':
  if len(args) != 1:
    print 'get requires 1 args'
    sys.exit(1)
  pp.pprint(client.get(args[0],))

elif cmd == 'putjson':
  if len(args) != 4:
    print 'putjson requires 4 args'
    sys.exit(1)
  pp.pprint(client.putjson(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'delkey':
  if len(args) != 1:
    print 'delkey requires 1 args'
    sys.exit(1)
  pp.pprint(client.delkey(args[0],))

elif cmd == 'dump':
  if len(args) != 0:
    print 'dump requires 0 args'
    sys.exit(1)
  pp.pprint(client.dump())

elif cmd == 'put':
  if len(args) != 2:
    print 'put requires 2 args'
    sys.exit(1)
  pp.pprint(client.put(args[0],args[1],))

elif cmd == 'load':
  if len(args) != 1:
    print 'load requires 1 args'
    sys.exit(1)
  pp.pprint(client.load(args[0],))

elif cmd == 'shutdown':
  if len(args) != 0:
    print 'shutdown requires 0 args'
    sys.exit(1)
  pp.pprint(client.shutdown())

elif cmd == 'clear':
  if len(args) != 0:
    print 'clear requires 0 args'
    sys.exit(1)
  pp.pprint(client.clear())

elif cmd == 'count':
  if len(args) != 0:
    print 'count requires 0 args'
    sys.exit(1)
  pp.pprint(client.count())

elif cmd == 'scan':
  if len(args) != 0:
    print 'scan requires 0 args'
    sys.exit(1)
  pp.pprint(client.scan())

elif cmd == 'range':
  if len(args) != 2:
    print 'range requires 2 args'
    sys.exit(1)
  pp.pprint(client.range(args[0],args[1],))

elif cmd == 'putbatch':
  if len(args) != 1:
    print 'putbatch requires 1 args'
    sys.exit(1)
  pp.pprint(client.putbatch(eval(args[0]),))

elif cmd == 'status':
  if len(args) != 0:
    print 'status requires 0 args'
    sys.exit(1)
  pp.pprint(client.status())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
