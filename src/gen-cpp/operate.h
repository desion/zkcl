/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef operate_H
#define operate_H

#include <TProcessor.h>
#include "CacheServer_types.h"



class operateIf {
 public:
  virtual ~operateIf() {}
  virtual void get(std::string& _return, const std::string& rowkey) = 0;
  virtual int32_t putjson(const std::string& rowkey, const std::string& key, const std::string& value, const int32_t type) = 0;
  virtual int32_t delkey(const std::string& rowkey) = 0;
  virtual int32_t dump() = 0;
  virtual int32_t put(const std::string& rowkey, const std::string& value) = 0;
  virtual int32_t load(const std::string& file) = 0;
  virtual int32_t shutdown() = 0;
  virtual int32_t clear() = 0;
  virtual int32_t count() = 0;
  virtual int32_t scan() = 0;
  virtual int32_t range(const std::string& from, const std::string& to) = 0;
  virtual int32_t putbatch(const std::vector<kv> & kvs) = 0;
  virtual void status(std::string& _return) = 0;
};

class operateNull : virtual public operateIf {
 public:
  virtual ~operateNull() {}
  void get(std::string& /* _return */, const std::string& /* rowkey */) {
    return;
  }
  int32_t putjson(const std::string& /* rowkey */, const std::string& /* key */, const std::string& /* value */, const int32_t /* type */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t delkey(const std::string& /* rowkey */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t dump() {
    int32_t _return = 0;
    return _return;
  }
  int32_t put(const std::string& /* rowkey */, const std::string& /* value */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t load(const std::string& /* file */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t shutdown() {
    int32_t _return = 0;
    return _return;
  }
  int32_t clear() {
    int32_t _return = 0;
    return _return;
  }
  int32_t count() {
    int32_t _return = 0;
    return _return;
  }
  int32_t scan() {
    int32_t _return = 0;
    return _return;
  }
  int32_t range(const std::string& /* from */, const std::string& /* to */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t putbatch(const std::vector<kv> & /* kvs */) {
    int32_t _return = 0;
    return _return;
  }
  void status(std::string& /* _return */) {
    return;
  }
};

typedef struct _operate_get_args__isset {
  _operate_get_args__isset() : rowkey(false) {}
  bool rowkey;
} _operate_get_args__isset;

class operate_get_args {
 public:

  operate_get_args() : rowkey("") {
  }

  virtual ~operate_get_args() throw() {}

  std::string rowkey;

  _operate_get_args__isset __isset;

  void __set_rowkey(const std::string& val) {
    rowkey = val;
  }

  bool operator == (const operate_get_args & rhs) const
  {
    if (!(rowkey == rhs.rowkey))
      return false;
    return true;
  }
  bool operator != (const operate_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_get_pargs {
 public:


  virtual ~operate_get_pargs() throw() {}

  const std::string* rowkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_get_result__isset {
  _operate_get_result__isset() : success(false) {}
  bool success;
} _operate_get_result__isset;

class operate_get_result {
 public:

  operate_get_result() : success("") {
  }

  virtual ~operate_get_result() throw() {}

  std::string success;

  _operate_get_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const operate_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_get_presult__isset {
  _operate_get_presult__isset() : success(false) {}
  bool success;
} _operate_get_presult__isset;

class operate_get_presult {
 public:


  virtual ~operate_get_presult() throw() {}

  std::string* success;

  _operate_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _operate_putjson_args__isset {
  _operate_putjson_args__isset() : rowkey(false), key(false), value(false), type(false) {}
  bool rowkey;
  bool key;
  bool value;
  bool type;
} _operate_putjson_args__isset;

class operate_putjson_args {
 public:

  operate_putjson_args() : rowkey(""), key(""), value(""), type(0) {
  }

  virtual ~operate_putjson_args() throw() {}

  std::string rowkey;
  std::string key;
  std::string value;
  int32_t type;

  _operate_putjson_args__isset __isset;

  void __set_rowkey(const std::string& val) {
    rowkey = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  void __set_type(const int32_t val) {
    type = val;
  }

  bool operator == (const operate_putjson_args & rhs) const
  {
    if (!(rowkey == rhs.rowkey))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const operate_putjson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_putjson_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_putjson_pargs {
 public:


  virtual ~operate_putjson_pargs() throw() {}

  const std::string* rowkey;
  const std::string* key;
  const std::string* value;
  const int32_t* type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_putjson_result__isset {
  _operate_putjson_result__isset() : success(false) {}
  bool success;
} _operate_putjson_result__isset;

class operate_putjson_result {
 public:

  operate_putjson_result() : success(0) {
  }

  virtual ~operate_putjson_result() throw() {}

  int32_t success;

  _operate_putjson_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const operate_putjson_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_putjson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_putjson_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_putjson_presult__isset {
  _operate_putjson_presult__isset() : success(false) {}
  bool success;
} _operate_putjson_presult__isset;

class operate_putjson_presult {
 public:


  virtual ~operate_putjson_presult() throw() {}

  int32_t* success;

  _operate_putjson_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _operate_delkey_args__isset {
  _operate_delkey_args__isset() : rowkey(false) {}
  bool rowkey;
} _operate_delkey_args__isset;

class operate_delkey_args {
 public:

  operate_delkey_args() : rowkey("") {
  }

  virtual ~operate_delkey_args() throw() {}

  std::string rowkey;

  _operate_delkey_args__isset __isset;

  void __set_rowkey(const std::string& val) {
    rowkey = val;
  }

  bool operator == (const operate_delkey_args & rhs) const
  {
    if (!(rowkey == rhs.rowkey))
      return false;
    return true;
  }
  bool operator != (const operate_delkey_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_delkey_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_delkey_pargs {
 public:


  virtual ~operate_delkey_pargs() throw() {}

  const std::string* rowkey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_delkey_result__isset {
  _operate_delkey_result__isset() : success(false) {}
  bool success;
} _operate_delkey_result__isset;

class operate_delkey_result {
 public:

  operate_delkey_result() : success(0) {
  }

  virtual ~operate_delkey_result() throw() {}

  int32_t success;

  _operate_delkey_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const operate_delkey_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_delkey_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_delkey_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_delkey_presult__isset {
  _operate_delkey_presult__isset() : success(false) {}
  bool success;
} _operate_delkey_presult__isset;

class operate_delkey_presult {
 public:


  virtual ~operate_delkey_presult() throw() {}

  int32_t* success;

  _operate_delkey_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class operate_dump_args {
 public:

  operate_dump_args() {
  }

  virtual ~operate_dump_args() throw() {}


  bool operator == (const operate_dump_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const operate_dump_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_dump_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_dump_pargs {
 public:


  virtual ~operate_dump_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_dump_result__isset {
  _operate_dump_result__isset() : success(false) {}
  bool success;
} _operate_dump_result__isset;

class operate_dump_result {
 public:

  operate_dump_result() : success(0) {
  }

  virtual ~operate_dump_result() throw() {}

  int32_t success;

  _operate_dump_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const operate_dump_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_dump_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_dump_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_dump_presult__isset {
  _operate_dump_presult__isset() : success(false) {}
  bool success;
} _operate_dump_presult__isset;

class operate_dump_presult {
 public:


  virtual ~operate_dump_presult() throw() {}

  int32_t* success;

  _operate_dump_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _operate_put_args__isset {
  _operate_put_args__isset() : rowkey(false), value(false) {}
  bool rowkey;
  bool value;
} _operate_put_args__isset;

class operate_put_args {
 public:

  operate_put_args() : rowkey(""), value("") {
  }

  virtual ~operate_put_args() throw() {}

  std::string rowkey;
  std::string value;

  _operate_put_args__isset __isset;

  void __set_rowkey(const std::string& val) {
    rowkey = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const operate_put_args & rhs) const
  {
    if (!(rowkey == rhs.rowkey))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const operate_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_put_pargs {
 public:


  virtual ~operate_put_pargs() throw() {}

  const std::string* rowkey;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_put_result__isset {
  _operate_put_result__isset() : success(false) {}
  bool success;
} _operate_put_result__isset;

class operate_put_result {
 public:

  operate_put_result() : success(0) {
  }

  virtual ~operate_put_result() throw() {}

  int32_t success;

  _operate_put_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const operate_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_put_presult__isset {
  _operate_put_presult__isset() : success(false) {}
  bool success;
} _operate_put_presult__isset;

class operate_put_presult {
 public:


  virtual ~operate_put_presult() throw() {}

  int32_t* success;

  _operate_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _operate_load_args__isset {
  _operate_load_args__isset() : file(false) {}
  bool file;
} _operate_load_args__isset;

class operate_load_args {
 public:

  operate_load_args() : file("") {
  }

  virtual ~operate_load_args() throw() {}

  std::string file;

  _operate_load_args__isset __isset;

  void __set_file(const std::string& val) {
    file = val;
  }

  bool operator == (const operate_load_args & rhs) const
  {
    if (!(file == rhs.file))
      return false;
    return true;
  }
  bool operator != (const operate_load_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_load_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_load_pargs {
 public:


  virtual ~operate_load_pargs() throw() {}

  const std::string* file;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_load_result__isset {
  _operate_load_result__isset() : success(false) {}
  bool success;
} _operate_load_result__isset;

class operate_load_result {
 public:

  operate_load_result() : success(0) {
  }

  virtual ~operate_load_result() throw() {}

  int32_t success;

  _operate_load_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const operate_load_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_load_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_load_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_load_presult__isset {
  _operate_load_presult__isset() : success(false) {}
  bool success;
} _operate_load_presult__isset;

class operate_load_presult {
 public:


  virtual ~operate_load_presult() throw() {}

  int32_t* success;

  _operate_load_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class operate_shutdown_args {
 public:

  operate_shutdown_args() {
  }

  virtual ~operate_shutdown_args() throw() {}


  bool operator == (const operate_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const operate_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_shutdown_pargs {
 public:


  virtual ~operate_shutdown_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_shutdown_result__isset {
  _operate_shutdown_result__isset() : success(false) {}
  bool success;
} _operate_shutdown_result__isset;

class operate_shutdown_result {
 public:

  operate_shutdown_result() : success(0) {
  }

  virtual ~operate_shutdown_result() throw() {}

  int32_t success;

  _operate_shutdown_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const operate_shutdown_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_shutdown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_shutdown_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_shutdown_presult__isset {
  _operate_shutdown_presult__isset() : success(false) {}
  bool success;
} _operate_shutdown_presult__isset;

class operate_shutdown_presult {
 public:


  virtual ~operate_shutdown_presult() throw() {}

  int32_t* success;

  _operate_shutdown_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class operate_clear_args {
 public:

  operate_clear_args() {
  }

  virtual ~operate_clear_args() throw() {}


  bool operator == (const operate_clear_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const operate_clear_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_clear_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_clear_pargs {
 public:


  virtual ~operate_clear_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_clear_result__isset {
  _operate_clear_result__isset() : success(false) {}
  bool success;
} _operate_clear_result__isset;

class operate_clear_result {
 public:

  operate_clear_result() : success(0) {
  }

  virtual ~operate_clear_result() throw() {}

  int32_t success;

  _operate_clear_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const operate_clear_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_clear_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_clear_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_clear_presult__isset {
  _operate_clear_presult__isset() : success(false) {}
  bool success;
} _operate_clear_presult__isset;

class operate_clear_presult {
 public:


  virtual ~operate_clear_presult() throw() {}

  int32_t* success;

  _operate_clear_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class operate_count_args {
 public:

  operate_count_args() {
  }

  virtual ~operate_count_args() throw() {}


  bool operator == (const operate_count_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const operate_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_count_pargs {
 public:


  virtual ~operate_count_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_count_result__isset {
  _operate_count_result__isset() : success(false) {}
  bool success;
} _operate_count_result__isset;

class operate_count_result {
 public:

  operate_count_result() : success(0) {
  }

  virtual ~operate_count_result() throw() {}

  int32_t success;

  _operate_count_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const operate_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_count_presult__isset {
  _operate_count_presult__isset() : success(false) {}
  bool success;
} _operate_count_presult__isset;

class operate_count_presult {
 public:


  virtual ~operate_count_presult() throw() {}

  int32_t* success;

  _operate_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class operate_scan_args {
 public:

  operate_scan_args() {
  }

  virtual ~operate_scan_args() throw() {}


  bool operator == (const operate_scan_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const operate_scan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_scan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_scan_pargs {
 public:


  virtual ~operate_scan_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_scan_result__isset {
  _operate_scan_result__isset() : success(false) {}
  bool success;
} _operate_scan_result__isset;

class operate_scan_result {
 public:

  operate_scan_result() : success(0) {
  }

  virtual ~operate_scan_result() throw() {}

  int32_t success;

  _operate_scan_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const operate_scan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_scan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_scan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_scan_presult__isset {
  _operate_scan_presult__isset() : success(false) {}
  bool success;
} _operate_scan_presult__isset;

class operate_scan_presult {
 public:


  virtual ~operate_scan_presult() throw() {}

  int32_t* success;

  _operate_scan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _operate_range_args__isset {
  _operate_range_args__isset() : from(false), to(false) {}
  bool from;
  bool to;
} _operate_range_args__isset;

class operate_range_args {
 public:

  operate_range_args() : from(""), to("") {
  }

  virtual ~operate_range_args() throw() {}

  std::string from;
  std::string to;

  _operate_range_args__isset __isset;

  void __set_from(const std::string& val) {
    from = val;
  }

  void __set_to(const std::string& val) {
    to = val;
  }

  bool operator == (const operate_range_args & rhs) const
  {
    if (!(from == rhs.from))
      return false;
    if (!(to == rhs.to))
      return false;
    return true;
  }
  bool operator != (const operate_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_range_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_range_pargs {
 public:


  virtual ~operate_range_pargs() throw() {}

  const std::string* from;
  const std::string* to;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_range_result__isset {
  _operate_range_result__isset() : success(false) {}
  bool success;
} _operate_range_result__isset;

class operate_range_result {
 public:

  operate_range_result() : success(0) {
  }

  virtual ~operate_range_result() throw() {}

  int32_t success;

  _operate_range_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const operate_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_range_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_range_presult__isset {
  _operate_range_presult__isset() : success(false) {}
  bool success;
} _operate_range_presult__isset;

class operate_range_presult {
 public:


  virtual ~operate_range_presult() throw() {}

  int32_t* success;

  _operate_range_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _operate_putbatch_args__isset {
  _operate_putbatch_args__isset() : kvs(false) {}
  bool kvs;
} _operate_putbatch_args__isset;

class operate_putbatch_args {
 public:

  operate_putbatch_args() {
  }

  virtual ~operate_putbatch_args() throw() {}

  std::vector<kv>  kvs;

  _operate_putbatch_args__isset __isset;

  void __set_kvs(const std::vector<kv> & val) {
    kvs = val;
  }

  bool operator == (const operate_putbatch_args & rhs) const
  {
    if (!(kvs == rhs.kvs))
      return false;
    return true;
  }
  bool operator != (const operate_putbatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_putbatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_putbatch_pargs {
 public:


  virtual ~operate_putbatch_pargs() throw() {}

  const std::vector<kv> * kvs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_putbatch_result__isset {
  _operate_putbatch_result__isset() : success(false) {}
  bool success;
} _operate_putbatch_result__isset;

class operate_putbatch_result {
 public:

  operate_putbatch_result() : success(0) {
  }

  virtual ~operate_putbatch_result() throw() {}

  int32_t success;

  _operate_putbatch_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const operate_putbatch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_putbatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_putbatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_putbatch_presult__isset {
  _operate_putbatch_presult__isset() : success(false) {}
  bool success;
} _operate_putbatch_presult__isset;

class operate_putbatch_presult {
 public:


  virtual ~operate_putbatch_presult() throw() {}

  int32_t* success;

  _operate_putbatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class operate_status_args {
 public:

  operate_status_args() {
  }

  virtual ~operate_status_args() throw() {}


  bool operator == (const operate_status_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const operate_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class operate_status_pargs {
 public:


  virtual ~operate_status_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_status_result__isset {
  _operate_status_result__isset() : success(false) {}
  bool success;
} _operate_status_result__isset;

class operate_status_result {
 public:

  operate_status_result() : success("") {
  }

  virtual ~operate_status_result() throw() {}

  std::string success;

  _operate_status_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const operate_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const operate_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operate_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _operate_status_presult__isset {
  _operate_status_presult__isset() : success(false) {}
  bool success;
} _operate_status_presult__isset;

class operate_status_presult {
 public:


  virtual ~operate_status_presult() throw() {}

  std::string* success;

  _operate_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class operateClient : virtual public operateIf {
 public:
  operateClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  operateClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::string& _return, const std::string& rowkey);
  void send_get(const std::string& rowkey);
  void recv_get(std::string& _return);
  int32_t putjson(const std::string& rowkey, const std::string& key, const std::string& value, const int32_t type);
  void send_putjson(const std::string& rowkey, const std::string& key, const std::string& value, const int32_t type);
  int32_t recv_putjson();
  int32_t delkey(const std::string& rowkey);
  void send_delkey(const std::string& rowkey);
  int32_t recv_delkey();
  int32_t dump();
  void send_dump();
  int32_t recv_dump();
  int32_t put(const std::string& rowkey, const std::string& value);
  void send_put(const std::string& rowkey, const std::string& value);
  int32_t recv_put();
  int32_t load(const std::string& file);
  void send_load(const std::string& file);
  int32_t recv_load();
  int32_t shutdown();
  void send_shutdown();
  int32_t recv_shutdown();
  int32_t clear();
  void send_clear();
  int32_t recv_clear();
  int32_t count();
  void send_count();
  int32_t recv_count();
  int32_t scan();
  void send_scan();
  int32_t recv_scan();
  int32_t range(const std::string& from, const std::string& to);
  void send_range(const std::string& from, const std::string& to);
  int32_t recv_range();
  int32_t putbatch(const std::vector<kv> & kvs);
  void send_putbatch(const std::vector<kv> & kvs);
  int32_t recv_putbatch();
  void status(std::string& _return);
  void send_status();
  void recv_status(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class operateProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<operateIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (operateProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putjson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delkey(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dump(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_scan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putbatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  operateProcessor(boost::shared_ptr<operateIf> iface) :
    iface_(iface) {
    processMap_["get"] = &operateProcessor::process_get;
    processMap_["putjson"] = &operateProcessor::process_putjson;
    processMap_["delkey"] = &operateProcessor::process_delkey;
    processMap_["dump"] = &operateProcessor::process_dump;
    processMap_["put"] = &operateProcessor::process_put;
    processMap_["load"] = &operateProcessor::process_load;
    processMap_["shutdown"] = &operateProcessor::process_shutdown;
    processMap_["clear"] = &operateProcessor::process_clear;
    processMap_["count"] = &operateProcessor::process_count;
    processMap_["scan"] = &operateProcessor::process_scan;
    processMap_["range"] = &operateProcessor::process_range;
    processMap_["putbatch"] = &operateProcessor::process_putbatch;
    processMap_["status"] = &operateProcessor::process_status;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~operateProcessor() {}
};

class operateMultiface : virtual public operateIf {
 public:
  operateMultiface(std::vector<boost::shared_ptr<operateIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~operateMultiface() {}
 protected:
  std::vector<boost::shared_ptr<operateIf> > ifaces_;
  operateMultiface() {}
  void add(boost::shared_ptr<operateIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(std::string& _return, const std::string& rowkey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get(_return, rowkey);
        return;
      } else {
        ifaces_[i]->get(_return, rowkey);
      }
    }
  }

  int32_t putjson(const std::string& rowkey, const std::string& key, const std::string& value, const int32_t type) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->putjson(rowkey, key, value, type);
      } else {
        ifaces_[i]->putjson(rowkey, key, value, type);
      }
    }
  }

  int32_t delkey(const std::string& rowkey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->delkey(rowkey);
      } else {
        ifaces_[i]->delkey(rowkey);
      }
    }
  }

  int32_t dump() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->dump();
      } else {
        ifaces_[i]->dump();
      }
    }
  }

  int32_t put(const std::string& rowkey, const std::string& value) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->put(rowkey, value);
      } else {
        ifaces_[i]->put(rowkey, value);
      }
    }
  }

  int32_t load(const std::string& file) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->load(file);
      } else {
        ifaces_[i]->load(file);
      }
    }
  }

  int32_t shutdown() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->shutdown();
      } else {
        ifaces_[i]->shutdown();
      }
    }
  }

  int32_t clear() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->clear();
      } else {
        ifaces_[i]->clear();
      }
    }
  }

  int32_t count() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->count();
      } else {
        ifaces_[i]->count();
      }
    }
  }

  int32_t scan() {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->scan();
      } else {
        ifaces_[i]->scan();
      }
    }
  }

  int32_t range(const std::string& from, const std::string& to) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->range(from, to);
      } else {
        ifaces_[i]->range(from, to);
      }
    }
  }

  int32_t putbatch(const std::vector<kv> & kvs) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->putbatch(kvs);
      } else {
        ifaces_[i]->putbatch(kvs);
      }
    }
  }

  void status(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->status(_return);
        return;
      } else {
        ifaces_[i]->status(_return);
      }
    }
  }

};



#endif
